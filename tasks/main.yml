# Package tweaks
- name: Faster dnf
  become: yes
  become_method: sudo
  ini_file:
    path: /etc/dnf/dnf.conf
    section: main
    option: fastestmirror
    value: true

- name: Update pre-installed packages
  become: yes
  become_method: sudo
  dnf:
    name: '*'
    state: latest

- name: External repos
  become: yes
  become_method: sudo
  include_role:
    name: fedora
    tasks_from: copr
  loop:
  - user: thelocehiliosan
    repo: yadm
  - user: copart
    repo: restic

- name: Basic packages
  become: yes
  become_method: sudo
  dnf:
    name:
    - "@Administration Tools"
    - "@C Development Tools and Libraries"
    - "@Hardware Support"
    - ansible
    - autojump
    - cmake
    - extra-cmake-modules
    - emacs
    - firefox
    - fzf
    - git
    - git-subtree
    - keepassxc
    - kf5-plasma-devel
    - npm
    - okular
    - pandoc
    - patch
    - python2-devel
    - restic
    - rhythmbox
    - the_silver_searcher
    - tlp
    - tlp-rdw
    - tmux
    - vim-enhanced
    - yadm
    state: latest

- name: H264
  become: yes
  become_method: sudo
  block:
  - name: H264
    command: dnf config-manager --set-enabled fedora-cisco-openh264 warn=False
    changed_when: False
  - dnf:
      name:  
      - gstreamer1-plugin-openh264
      - mozilla-openh264

- name: Unwanted KDE packages
  become: yes
  become_method: sudo
  dnf:
    name:
    - akgregator
    - kget
    - kmail
    - knode
    - konqueror
    - kontact
    state: absent

- name: dnf cleanup
  become: yes
  become_method: sudo
  dnf:
    autoremove: yes

# ssh lockdown
- name: Disable Password Authentication
  become: yes
  become_method: sudo
  lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: "PasswordAuthentication no"
        state: present
        backup: yes
        validate: /usr/sbin/sshd -t -f %s
  notify:
  - restart ssh

- name: Disable ChallengeResponse Authentication
  become: yes
  become_method: sudo
  lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^ChallengeResponseAuthentication'
        line: "ChallengeResponseAuthentication no"
        state: present
        backup: yes
        validate: /usr/sbin/sshd -t -f %s
  notify:
  - restart ssh

- name: Disable Root Login
  become: yes
  become_method: sudo
  lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: "PermitRootLogin no"
        state: present
        backup: yes
        validate: /usr/sbin/sshd -t -f %s
  notify:
    - restart ssh

- name: SSD trim
  become: yes
  become_method: sudo
  service:
      name=fstrim.timer
      enabled=yes

- name: KDE widgets
  include_role:
    name: fedora
    tasks_from: kde_widgets
  loop:
  - repo: https://github.com/dfaust/plasma-applet-netspeed-widget
    name: org.kde.netspeedWidget
  loop_control:
    loop_var: widget

- name: Configure Plasma shell
  block:
  - tempfile:
      state: file
    register: plasma_js
    changed_when: false
  - copy:
      src: configure_plasma_shell.js
      dest: '{{ plasma_js.path }}'
    changed_when: false
  - shell: 'qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript "$(<{{ plasma_js.path }})"'
    args:
        executable: /bin/bash
    # TODO: any easy way to tell when this changed?
    changed_when: false

- name: Partial INI configs
  include_role:
    name: fedora
    tasks_from: partial_ini
  loop: "{{ query('filetree', 'ini_updates') }}"
  loop_control:
    loop_var: ini_item
  when: ini_item.state == 'file'

# TODO: update existing repo?
- name: yadm clone
  command: 'yadm clone {{ yadm_repo }}'
  when: yadm_repo is defined
  args:
      creates: '{{ ansible_env.HOME }}/.yadm'

- name: pyadm clone
  command: 'yadm clone --yadm-dir {{ ansible_env.HOME }}/.pyadm {{ pyadm_repo }}'
  when: pyadm_repo is defined
  args:
      creates: '{{ ansible_env.HOME }}/.pyadm'

- name: conda
  block:
  - name: Check conda already installed
    stat:
      path: '{{ ansible_env.HOME }}/conda/bin/conda'
    register: conda_bin
  - name: Download miniconda
    get_url:
      url: https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
      dest: /tmp/miniconda.sh
    when: conda_bin.stat.exists == False
  - name: install miniconda
    command: 'bash /tmp/miniconda.sh -b -p  {{ ansible_env.HOME }}/conda'
    args:
      creates: '{{ ansible_env.HOME }}/conda/bin/conda'
  - name: update conda
    command: '{{ ansible_env.HOME }}/conda/bin/conda update -y conda'
    register: conda_update
    changed_when: conda_update.stdout is not search("# All requested packages already installed.")

- name: npm
  block:
  - name: Set user npm prefix
    ini_file:
      path: '{{ ansible_env.HOME }}/.npmrc'
      section: null
      option: prefix
      value: '{{ ansible_env.HOME }}/.local/share/npm'
      mode: 0770
      no_extra_spaces: yes
  - name: Install npm modules
    npm:
      name: '{{ item }}'
      global: yes
      state: latest
    loop:
    - typescript

- name: Add the flathub flatpak repository remote to the user installation
  flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    method: user

- name: Install the flatpaks from flathub for current user
  flatpak:
    name: '{{ item }}'
    state: present
  loop:
  - com.visualstudio.code.oss
  - org.zotero.Zotero
  - org.inkscape.Inkscape
  - org.libreoffice.LibreOffice
  - com.slack.Slack
  - org.videolan.VLC
  - org.gtk.Gtk3theme.Arc-Dark

- name: Install vscode
  become: yes
  become_method: sudo
  block:
  - name: Add repo key
    rpm_key:
      state: present
      key: https://packages.microsoft.com/keys/microsoft.asc
  - name: Install vscode repo
    yum_repository:
      name: visual-studio-code
      description: Visual Studio Code
      baseurl: https://packages.microsoft.com/yumrepos/vscode
      gpgkey: https://packages.microsoft.com/keys/microsoft.asc
  - name: update dnf cache
    command: dnf check-update
    changed_when: False
  - name: Install vscode
    dnf:
      name:
      - code
      state: latest

